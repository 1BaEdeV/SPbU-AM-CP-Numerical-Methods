#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞ Matrix –±–µ–∑ numpy
"""

import class_matrix
import funcs
from task_data import *
from Methods import *

def solve_exact_gauss(A, b):
    """
    –¢–æ—á–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –°–õ–ê–£ –º–µ—Ç–æ–¥–æ–º –ì–∞—É—Å—Å–∞ –±–µ–∑ numpy
    """
    # –°–æ–∑–¥–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –º–∞—Ç—Ä–∏—Ü—É [A|b]  
    rows, cols = A.dim()
    augmented = []
    
    for i in range(rows):
        row = A.matrix[i][:] + [b.matrix[i][0]]
        augmented.append(row)
    
    n = len(augmented)
    
    # –ü—Ä—è–º–æ–π —Ö–æ–¥ –º–µ—Ç–æ–¥–∞ –ì–∞—É—Å—Å–∞
    for i in range(n):
        # –ü–æ–∏—Å–∫ –≥–ª–∞–≤–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
        max_row = i
        for k in range(i + 1, n):
            if abs(augmented[k][i]) > abs(augmented[max_row][i]):
                max_row = k
        
        # –û–±–º–µ–Ω —Å—Ç—Ä–æ–∫
        augmented[i], augmented[max_row] = augmented[max_row], augmented[i]
        
        # –ò—Å–∫–ª—é—á–µ–Ω–∏–µ
        for k in range(i + 1, n):
            if augmented[i][i] != 0:  # –ò–∑–±–µ–≥–∞–µ–º –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å
                factor = augmented[k][i] / augmented[i][i]
                for j in range(i, n + 1):
                    augmented[k][j] -= factor * augmented[i][j]
    
    # –û–±—Ä–∞—Ç–Ω—ã–π —Ö–æ–¥
    solution = [0] * n
    for i in range(n - 1, -1, -1):
        solution[i] = augmented[i][n]
        for j in range(i + 1, n):
            solution[i] -= augmented[i][j] * solution[j]
        if augmented[i][i] != 0:
            solution[i] /= augmented[i][i]
    
    return solution

def main():
    eps = 10 ** -5
    print("=== –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞ Matrix ===\n")
    
    for i in range(3):  # –£–º–µ–Ω—å—à–∏–ª–∏ –¥–æ 3 —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏
        try:
            A = class_matrix.Matrix(testdata(i).A)
            b = class_matrix.Matrix(testdata(i).b)
            print(f'{"="*20} –¢–µ—Å—Ç {i} {"="*20}')
            
            print(f"–ú–∞—Ç—Ä–∏—Ü–∞ A ({A.dim()[0]}x{A.dim()[1]}):")
            A.PrintM()
            
            print(f"–í–µ–∫—Ç–æ—Ä b ({b.dim()[0]}x{b.dim()[1]}):")
            b.PrintM()
            
            # –¢–æ—á–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –º–µ—Ç–æ–¥–æ–º –ì–∞—É—Å—Å–∞
            print("\nüìä –¢–æ—á–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ (–º–µ—Ç–æ–¥ –ì–∞—É—Å—Å–∞):")
            exact_solution = solve_exact_gauss(A, b)
            exact_matrix = class_matrix.Matrix([[x] for x in exact_solution])
            exact_matrix.PrintM()
            
            # –†–µ—à–µ–Ω–∏–µ –º–µ—Ç–æ–¥–æ–º –ø—Ä–æ—Å—Ç—ã—Ö –∏—Ç–µ—Ä–∞—Ü–∏–π
            print("\nüîÑ –†–µ—à–µ–Ω–∏–µ –º–µ—Ç–æ–¥–æ–º –ø—Ä–æ—Å—Ç—ã—Ö –∏—Ç–µ—Ä–∞—Ü–∏–π:")
            try:
                res_si, n_si = MoSI(A, b, eps)
                res_si.PrintM()
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–µ—à–µ–Ω–∏–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                if res_si.dim()[1] == 1:  # –≠—Ç–æ –≤–µ–∫—Ç–æ—Ä-—Å—Ç–æ–ª–±–µ—Ü
                    error_si = (res_si - exact_matrix).vecnorma()
                else:  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫ –≤–µ–∫—Ç–æ—Ä—É-—Å—Ç–æ–ª–±—Ü—É
                    res_si_col = class_matrix.Matrix([[res_si.matrix[0][i]] for i in range(len(res_si.matrix[0]))])
                    error_si = (res_si_col - exact_matrix).vecnorma()
                print(f"–ò—Ç–µ—Ä–∞—Ü–∏–π: {n_si}, –ó–∞–¥–∞–Ω–Ω–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å: {eps}, –ê–±—Å–æ–ª—é—Ç–Ω–∞—è –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å: {error_si:.2e}")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –≤ –º–µ—Ç–æ–¥–µ –ø—Ä–æ—Å—Ç—ã—Ö –∏—Ç–µ—Ä–∞—Ü–∏–π: {e}")
            
            print("\n" + "-" * 60)
            
            # –†–µ—à–µ–Ω–∏–µ –º–µ—Ç–æ–¥–æ–º –ó–µ–π–¥–µ–ª—è
            print("\nüéØ –†–µ—à–µ–Ω–∏–µ –º–µ—Ç–æ–¥–æ–º –ó–µ–π–¥–µ–ª—è:")
            try:
                res_seidel, n_seidel = Seidel(A, b, eps)
                res_seidel.PrintM()
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–µ—à–µ–Ω–∏–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                if res_seidel.dim()[1] == 1:  # –≠—Ç–æ –≤–µ–∫—Ç–æ—Ä-—Å—Ç–æ–ª–±–µ—Ü
                    error_seidel = (res_seidel - exact_matrix).vecnorma()
                else:  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫ –≤–µ–∫—Ç–æ—Ä—É-—Å—Ç–æ–ª–±—Ü—É
                    res_seidel_col = class_matrix.Matrix([[res_seidel.matrix[0][i]] for i in range(len(res_seidel.matrix[0]))])
                    error_seidel = (res_seidel_col - exact_matrix).vecnorma()
                print(f"–ò—Ç–µ—Ä–∞—Ü–∏–π: {n_seidel}, –ó–∞–¥–∞–Ω–Ω–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å: {eps}, –ê–±—Å–æ–ª—é—Ç–Ω–∞—è –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å: {error_seidel:.2e}")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –≤ –º–µ—Ç–æ–¥–µ –ó–µ–π–¥–µ–ª—è: {e}")
                
            print("\n" + "=" * 60 + "\n")
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {i}: {e}")
            continue

def demo_matrix_features():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞"""
    print("=== –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π ===\n")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –º–∞—Ç—Ä–∏—Ü
    print("1. –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü:")
    identity = class_matrix.Matrix(rows=3, cols=3, identity=True)
    print("–ï–¥–∏–Ω–∏—á–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞ 3x3:")
    identity.PrintM()
    
    zero = class_matrix.Matrix(rows=2, cols=4)
    print("–ù—É–ª–µ–≤–∞—è –º–∞—Ç—Ä–∏—Ü–∞ 2x4:")
    zero.PrintM()
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–≤–æ–π—Å—Ç–≤
    print("\n2. –ê–Ω–∞–ª–∏–∑ —Å–≤–æ–π—Å—Ç–≤ –º–∞—Ç—Ä–∏—Ü—ã:")
    test_matrix = class_matrix.Matrix([[1, 2, 3], [2, 5, 6], [3, 6, 9]])
    print("–¢–µ—Å—Ç–æ–≤–∞—è –º–∞—Ç—Ä–∏—Ü–∞:")
    test_matrix.PrintM()
    print(f"–°–∏–º–º–µ—Ç—Ä–∏—á–Ω–∞—è: {test_matrix.is_symmetric()}")
    print(f"–ö–≤–∞–¥—Ä–∞—Ç–Ω–∞—è: {test_matrix.is_square()}")
    print(f"–û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ–ª—å: {test_matrix.det():.4f}")
    print(f"–°–ª–µ–¥: {test_matrix.trace()}")
    print(f"–ù–æ—Ä–º–∞ –§—Ä–æ–±–µ–Ω–∏—É—Å–∞: {test_matrix.frobenius_norm():.4f}")
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π
    print("\n3. –ú–∞—Ç—Ä–∏—á–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:")
    A = class_matrix.Matrix([[1, 2], [3, 4]])
    B = class_matrix.Matrix([[5, 6], [7, 8]])
    print("–ú–∞—Ç—Ä–∏—Ü–∞ A:")
    A.PrintM()
    print("–ú–∞—Ç—Ä–∏—Ü–∞ B:")
    B.PrintM()
    print("A + B:")
    (A + B).PrintM()
    print("A * B:")
    (A * B).PrintM()

if __name__ == "__main__":
    try:
        demo_matrix_features()
        main()
        print("\n‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        raise
